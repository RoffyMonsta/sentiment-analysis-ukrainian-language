import json
import csv
import random
from custom_sentiment import calculate_sentiment

# === –ì–µ–Ω–µ—Ä–∞—Ü—ñ—è –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏—Ö –¥–∞–Ω–∏—Ö ===
def generate_neutral_data(count=500):
    templates = [
        "–¢–µ–º–ø–µ—Ä–∞—Ç—É—Ä–∞ –ø–æ–≤—ñ—Ç—Ä—è {temp} –≥—Ä–∞–¥—É—Å—ñ–≤",
        "–ú–∞–≥–∞–∑–∏–Ω –ø—Ä–∞—Ü—é—î –∑ {time1} –¥–æ {time2}", 
        "–ö—É—Ä—Å –¥–æ–ª–∞—Ä–∞ {rate} –≥—Ä–∏–≤–µ–Ω—å",
        "–î–æ–∫—É–º–µ–Ω—Ç–∏ –¥–æ {date}",
        "–ê–≤—Ç–æ–±—É—Å –∫–æ–∂–Ω—ñ {min} —Ö–≤–∏–ª–∏–Ω",
        "–£ –º—ñ—Å—Ç—ñ {pop} –ª—é–¥–µ–π",
        "–õ–µ–∫—Ü—ñ—è —Ç—Ä–∏–≤–∞—Ç–∏–º–µ {dur} –≥–æ–¥–∏–Ω–∏"
    ]
    
    fillers = {
        'temp': ['20', '15', '25', '18'], 'time1': ['9:00', '10:00'], 'time2': ['18:00', '19:00'],
        'rate': ['37', '38', '39'], 'date': ['–ø–æ–Ω–µ–¥—ñ–ª–∫–∞', '–ø\'—è—Ç–Ω–∏—Ü—ñ'], 'min': ['15', '20'],
        'pop': ['50 —Ç–∏—Å—è—á', '100 —Ç–∏—Å—è—á'], 'dur': ['–¥–≤—ñ', '—Ç—Ä–∏']
    }
    
    neutral_texts = []
    for _ in range(count):
        template = random.choice(templates)
        text = template
        for key, values in fillers.items():
            if f'{{{key}}}' in text:
                text = text.replace(f'{{{key}}}', random.choice(values))
        
        # –ü–µ—Ä–µ–≤—ñ—Ä—è—î–º–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ñ—Å—Ç—å
        result = calculate_sentiment(text)
        if abs(result['compound']) < 0.3:
            neutral_texts.append({'msg': text})
    
    return neutral_texts

# === –í—Ö—ñ–¥–Ω—ñ —Ñ–∞–π–ª–∏ ===
FILES = [
    ('positive.json', 'positive'),
    ('negative.json', 'negative')
]

# === –í–∏—Ö—ñ–¥–Ω–∏–π —Ñ–∞–π–ª ===
OUTPUT_CSV = 'features_dataset.csv'

# === –ó–∞–≥–æ–ª–æ–≤–∫–∏ –∫–æ–ª–æ–Ω–æ–∫ ===
HEADERS = [
    'positive', 'negative', 'neutral', 'compound',
    'emoji_score', 'num_boosters', 'has_negation',
    'num_tokens', 'label'
]

# –ì–µ–Ω–µ—Ä—É—î–º–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
neutral_data = generate_neutral_data(500)
print(f"üìä –ó–≥–µ–Ω–µ—Ä–æ–≤–∞–Ω–æ {len(neutral_data)} –Ω–µ–π—Ç—Ä–∞–ª—å–Ω–∏—Ö —Ç–µ–∫—Å—Ç—ñ–≤")

total_lines = len(neutral_data)
for file_path, _ in FILES:
    with open(file_path, encoding='utf-8') as f:
        total_lines += sum(1 for _ in f)

print(f"üî¢ –í—Å—å–æ–≥–æ —Ç–≤—ñ—Ç—ñ–≤ –¥–æ –æ–±—Ä–æ–±–∫–∏: {total_lines}")

# === –ó–∞–ø–∏—Å—É—î–º–æ CSV ===
with open(OUTPUT_CSV, mode='w', newline='', encoding='utf-8') as csvfile:
    writer = csv.DictWriter(csvfile, fieldnames=HEADERS)
    writer.writeheader()

    processed = 0
    print(f"üîÑ –û–±—Ä–æ–±–∫–∞ {total_lines} —Ç–≤—ñ—Ç—ñ–≤...")
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ –Ω–µ–π—Ç—Ä–∞–ª—å–Ω—ñ –¥–∞–Ω—ñ
    for obj in neutral_data:
        text = obj.get('msg', '').strip()
        result = calculate_sentiment(text)
        
        row = {
            'positive': result.get('positive', 0),
            'negative': result.get('negative', 0),
            'neutral': result.get('neutral', 0),
            'compound': result.get('compound', 0),
            'emoji_score': result.get('emoji_score', 0),
            'num_boosters': result.get('num_boosters', 0),
            'has_negation': result.get('has_negation', 0),
            'num_tokens': result.get('num_tokens', 0),
            'label': 'neutral'
        }
        writer.writerow(row)
        processed += 1
        if processed % 100 == 0:
            print(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ {processed}/{total_lines}")
    
    # –û–±—Ä–æ–±–ª—è—î–º–æ —ñ—Å–Ω—É—é—á—ñ —Ñ–∞–π–ª–∏
    for file_path, label in FILES:
        with open(file_path, encoding='utf-8') as f:
            for idx, line in enumerate(f, start=1):
                try:
                    obj = json.loads(line)
                    text = obj.get('msg', '').strip()
                    if not text:  # Skip empty texts
                        continue
                except json.JSONDecodeError:
                    print(f"‚ö†Ô∏è Skipping invalid JSON at line {idx} in {file_path}")
                    continue

                result = calculate_sentiment(text)

                row = {
                    'positive': result.get('positive', 0),
                    'negative': result.get('negative', 0),
                    'neutral': result.get('neutral', 0),
                    'compound': result.get('compound', 0),
                    'emoji_score': result.get('emoji_score', 0),
                    'num_boosters': result.get('num_boosters', 0),
                    'has_negation': result.get('has_negation', 0),
                    'num_tokens': result.get('num_tokens', 0),
                    'label': label
                }

                writer.writerow(row)
                processed += 1
                
                if processed % 100 == 0:
                    print(f"‚úÖ –û–±—Ä–æ–±–ª–µ–Ω–æ {processed}/{total_lines}")

print(f"üéâ –ì–æ—Ç–æ–≤–æ! CSV –∑–±–µ—Ä–µ–∂–µ–Ω–æ: {OUTPUT_CSV}")
